version: '3.2'

services:
  db:
    restart: unless-stopped
    image: postgres:13.2-alpine
    command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_USER: "nodle"
      POSTGRES_DB: "nodle"
      POSTGRES_PASSWORD: "password"
    volumes:
     - nodle_db:/var/lib/postgresql/data
    ports:
     - "127.0.0.1:54321:5432"

  prometheus:
    image: prom/prometheus:v2.26.0
    volumes:
      - ./docker/dev/prometheus/config.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:7.5.2
    depends_on:
      - prometheus
    env_file:
      - ./docker/dev/grafana/grafana.env
    volumes:
      - ./docker/dev/grafana/provisioning/:/etc/grafana/provisioning/
      - ./docker/dev/grafana/dashboards/:/var/lib/grafana/dashboards
    ports:
      - 3000:3000

  indexer:
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/dev/app/Dockerfile
    env_file:
      - .env
    volumes:
      - ./:/app  # only dev
    command: ["sh", "-c", "npm ci && npm run start:indexer"]
    ports:
      - 9100:9100

  backfiller:
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/dev/app/Dockerfile
    env_file:
      - .env
    volumes:
      - ./:/app  # only dev
    command: ["sh", "-c", "npm ci && npm run start:backfiller"]
    ports:
      - 9101:9100

  graphql-server:
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/dev/app/Dockerfile
    env_file:
      - .env
    volumes:
      - ./:/app  # only dev
    command: ["sh", "-c", "npm ci && npm run start:server"]
    ports:
      - "4000:4000"

  rabbitmq:
    image: rabbitmq:3.9.7-management
    ports:
    - 15672:15672
    - 5672:5672
      
  redis:
    image: "redis:alpine"
    ports:
    - 6379:6379

volumes:
  nodle_db:
