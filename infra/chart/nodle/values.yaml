secrets:
  # Database credentials
  databaseHost: ""
  databaseUser: ""
  databaseName: ""
  databasePassword: ""
  databasePort: "5432"

  # RabbitMQ credentials
  rabbitMQURL: ""


#nodeSelector: {}
#
#tolerations: []
#
#affinity: {}

indexer:
  ## If false, indexer will not be installed
  ##
  enabled: true

  ## indexer container name
  ##
  name: indexer

  ## indexer container image
  ##
  image:
    repository: gcr.io/nodle-demo/app
    tag: 0ad6416
    pullPolicy: IfNotPresent

  replicaCount: 1

  ## Labels to be added to Nodle Indexer pods
  ##
  podLabels: {}

  ## indexer resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

backfiller:
  ## If false, backfiller will not be installed
  ##
  enabled: true

  ## backfiller container name
  ##
  name: backfiller

  ## backfiller container image
  ##
  image:
    repository: gcr.io/nodle-demo/app
    tag: 0ad6416
    pullPolicy: IfNotPresent

  replicaCount: 1

  ## Labels to be added to Nodle Indexer pods
  ##
  podLabels: {}

  ## backfiller resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

graphql:
  ## If false, graphql will not be installed
  ##
  enabled: true

  ## graphql container name
  ##
  name: graphql

  ## graphql container image
  ##
  image:
    repository: gcr.io/nodle-demo/app
    tag: 0ad6416
    pullPolicy: IfNotPresent

  replicaCount: 1

  ingress:
    ## If true, graphql Ingress will be created
    ##
    enabled: false

    ## graphql Ingress annotations
    ##
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## graphql Ingress additional labels
    ##
    extraLabels: {}

    ## graphql Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts: []
    #   - graphql.domain.com
    #   - domain.com/graphql

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## graphql Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - graphql.domain.com

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    # nodePort: 30000
    sessionAffinity: None
    type: NodePort

  ## graphql resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

frontend:
  ## If false, frontend will not be installed
  ##
  enabled: true

  ## frontend container name
  ##
  name: frontend

  ## frontend container image
  ##
  image:
    repository: gcr.io/nodle-demo/frontend
    tag: 0ad6416
    pullPolicy: IfNotPresent

  replicaCount: 1

  ingress:
    ## If true, frontend Ingress will be created
    ##
    enabled: false

    ## frontend Ingress annotations
    ##
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## frontend Ingress additional labels
    ##
    extraLabels: {}

    ## frontend Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts: []
    #   - frontend.domain.com
    #   - domain.com/frontend

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## frontend Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - frontend.domain.com

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    # nodePort: 30000
    sessionAffinity: None
    type: NodePort

  ## frontend resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi
